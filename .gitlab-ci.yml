image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3

stages:
  - demo
  - unit_test
  - source_install
  - package
  - package_install
  - deploy

variables:
  TWINE_REPOSITORY: pypi
  OSS_NAME: oss
  OSS_RELEASE_ROOT: ${OSS_NAME}/releases/${CI_PROJECT_NAME}
  OSS_DEV_ROOT: ${OSS_NAME}/dev/${CI_PROJECT_NAME}
  DEMO_ROOT: demo
  SIMPLE_DEMO_PATH: ${DEMO_ROOT}/demo_program
  REAL_DEMO_PATH: ${DEMO_ROOT}/test_real_program

before_script:
  - pip config set global.index-url "https://${PYPI_USERNAME}:${PYPI_PASSWORD}@${PYPI_HOST}/simple"
  - pip3 install 'pypirc-chappers>=1' 'twine>=1'
  - pypirc -q -s "${TWINE_REPOSITORY}" -r "${PYPI_URL}" -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}"
  - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  - if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
  - curl -o /usr/bin/mc "${RELEASE_URL}/mc" && chmod +x /usr/bin/mc
  - mc --version
  - mc config host add ${OSS_NAME} "${OSS_URL}" "${OSS_ACCESS_ID}" "${OSS_ACCESS_TOKEN}"
  - mkdir -p ${DEMO_ROOT} && tree -a ${DEMO_ROOT}

demo_development:
  stage: demo
  script:
    - pip3 install -e .
    - pyspj_dir=$(pip3 show pyspj | grep Location | cut -c 11-)/pyspj
      && tree -a ${pyspj_dir}
    - cd ${DEMO_ROOT}
    - pyspj -v
    - pyspj -h
    - cd ..

demo_production:
  stage: demo
  script:
    - pip3 install .
    - pyspj_dir=$(pip3 show pyspj | grep Location | cut -c 11-)/pyspj
      && tree -a ${pyspj_dir}
    - cd ${DEMO_ROOT}
    - pyspj -v
    - pyspj -h
    - cd ..

unit_test_in_3.6.3:
  stage: unit_test
  image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3
  variables:
    MIN_COVERAGE: 11
  script:
    - pip3 install -e .
    - pytest --version
    - make test

unit_test_in_3.7.6:
  stage: unit_test
  image: local-registry.inner.buaaoo.top/image-dev/python:3.7.6
  variables:
    MIN_COVERAGE: 11
  script:
    - pip3 install -e .
    - pytest --version
    - make test

unit_test_in_3.8.1:
  stage: unit_test
  image: local-registry.inner.buaaoo.top/image-dev/python:3.8.1
  variables:
    MIN_COVERAGE: 11
  script:
    - pip3 install -e .
    - pytest --version
    - make test

source_install_in_3.6.3:
  stage: source_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3
  script:
    - pip3 install .
    - mkdir -p ${DEMO_ROOT} && cd ${DEMO_ROOT} && ls -al
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h
    - cd .. && ls -al

source_install_in_3.7.6:
  stage: source_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.7.6
  script:
    - pip3 install .
    - mkdir -p ${DEMO_ROOT} && cd ${DEMO_ROOT} && ls -al
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h
    - cd .. && ls -al

source_install_in_3.8.1:
  stage: source_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.8.1
  script:
    - pip3 install .
    - mkdir -p ${DEMO_ROOT} && cd ${DEMO_ROOT} && ls -al
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h
    - cd .. && ls -al

package_in_3.6.3:
  stage: package
  image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3
  script:
    - python3 setup.py bdist_wheel
    - ls -al
    - tree -a build dist
  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_JOB_ID}-${CI_COMMIT_SHA}
    when: on_success
    expire_in: 2 hrs
    paths:
      - 'dist'

package_test_in_3.6.3:
  stage: package_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3
  variables:
    GIT_STRATEGY: none
  dependencies:
    - package_in_3.6.3
  script:
    - ls -al
    - tree -a build dist
    - pip3 install $(ls dist/*.whl)
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h

package_test_in_3.7.6:
  stage: package_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.7.6
  variables:
    GIT_STRATEGY: none
  dependencies:
    - package_in_3.6.3
  script:
    - ls -al
    - tree -a build dist
    - pip3 install $(ls dist/*.whl)
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h

package_test_in_3.8.1:
  stage: package_install
  image: local-registry.inner.buaaoo.top/image-dev/python:3.8.1
  variables:
    GIT_STRATEGY: none
  dependencies:
    - package_in_3.6.3
  script:
    - ls -al
    - tree -a build dist
    - pip3 install $(ls dist/*.whl)
    - python3 -c 'from pyspj.config.meta import __TITLE__, __VERSION__;print(__TITLE__, __VERSION__);'
    - pyspj -v
    - pyspj -h

deploy:
  stage: deploy
  image: local-registry.inner.buaaoo.top/image-dev/python:3.6.3
  variables:
    GIT_STRATEGY: none
  dependencies:
    - package_in_3.6.3
  script:
    - twine upload -r "${TWINE_REPOSITORY}" dist/*
  only:
    - /^release/.*$/@oo_system/judge/pyspj
